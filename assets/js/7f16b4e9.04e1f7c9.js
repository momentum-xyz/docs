"use strict";(self.webpackChunkmomentum=self.webpackChunkmomentum||[]).push([[524],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(r),h=n,u=m["".concat(l,".").concat(h)]||m[h]||d[h]||o;return r?a.createElement(u,i(i({ref:t},p),{},{components:r})):a.createElement(u,i({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2093:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:3},i="Momentum domain model",s={unversionedId:"arch/domain-model",id:"arch/domain-model",title:"Momentum domain model",description:"This is the abstract, high level, model which is the foundation for the actual data model and the whole application.",source:"@site/docs/arch/domain-model.md",sourceDirName:"arch",slug:"/arch/domain-model",permalink:"/arch/domain-model",draft:!1,editUrl:"https://github.com/momentum-xyz/docs/docs/arch/domain-model.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Third party services",permalink:"/arch/3th-party-deps"}},l={},c=[],p={toc:c};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"momentum-domain-model"},"Momentum domain model"),(0,n.kt)("p",null,"This is the abstract, high level, model which is the foundation for the actual data model and the whole application."),(0,n.kt)("p",null,"The base model for the data in the application is a very generic model, so that it is flexible to support many different types of worlds/use cases. This means this model doesn\u2019t contain any world specific entities but everything is built around types that can be configured for each world."),(0,n.kt)("p",null,"The simplified model of the main entities is:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Momentum space and user model",src:r(701).Z,title:"Diagram of the main data models.",width:"457",height:"219"})),(0,n.kt)("p",null,"So space and user each have a type and a recursive relation. This relation is used to create a tree-like hierarchy as the model in a world."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Space hierarchy")),(0,n.kt)("p",null,"The root of this tree is a special space with the \u2018Node\u2019 type (which maps to a server/hosting environment where multiple worlds can be located). Children linked to this node are the space entities with the \u2018world\u2019 type. Everything underneath a world is configurable for each world."),(0,n.kt)("p",null,"An example hierarchy of spaces could end up looking like this:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Diagram of an example space hierachy",src:r(6016).Z,title:"Example space structure",width:"960",height:"720"})),(0,n.kt)("p",null,"Each ",(0,n.kt)("inlineCode",{parentName:"p"},"spaceType")," defines what type of children are allowed (so one or more ",(0,n.kt)("inlineCode",{parentName:"p"},"spaceTypes"),", another recursive relation). The world being a ",(0,n.kt)("inlineCode",{parentName:"p"},"spaceType")," itself allows a world to configure which spaces are allowed directly underneath it. Every allowed ",(0,n.kt)("inlineCode",{parentName:"p"},"spaceType")," underneath it does the same for its children, creating a controlled hierarchy of objects in the world."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"User hierarchy")),(0,n.kt)("p",null,"The user model uses this structure to group users together. This is then used to create a role/permission model. This differs from the parent-child space model in that there is not necessarily a single root node and users can be connected to multiple \u2018parent\u2019 users. "),(0,n.kt)("p",null,"An example hierarchy of users:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Diagram of an example user hierarchy",src:r(1758).Z,title:"Example user structure",width:"811",height:"479"})),(0,n.kt)("p",null,"Users are initially created without any connection. But can then later be added as a member of another user. Meaning in this model the user entity is also used as a Group or Role and through this structure can inherit their membership/roles. So in the above example \u2018Bob\u2019 is a member of the \u2018World A owners\u2019, but through that relation also a member of the \u2018Node admins\u2019.  \u2018Trent\u2019 is a member of \u2018Bob\u2019 so is a member of the same things. But is also a member of \u2018Group X\u2019 and thus a \u2018World B owner\u2019."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"User space membership")),(0,n.kt)("p",null,"Between the main two entities is a many to many relationship. This relationship facilitates the permission model. Users can be made a \u2018space member\u2019 of a certain space. This relation currently has a single additional property (",(0,n.kt)("inlineCode",{parentName:"p"},"isAdmin"),") that allows an \u2018admin\u2019 role to be defined."),(0,n.kt)("p",null,"If a user has the admin role for a space, it is also considered to be an admin for all the children spaces underneath it. Since a node is also a space, giving somebody the admin role for the node, gives them the superpowers to administer ",(0,n.kt)("em",{parentName:"p"},"all")," of the worlds and their spaces on a node. "),(0,n.kt)("p",null,"This same mechanism can be used by a world owner to give specific users administrative powers over a specific part of the world."),(0,n.kt)("p",null,"The user hierarchy can be used to ease maintaining these permission roles, by creating special users that act as roles or groups, so permission can be given to a single entity. After that users only need to be added as a member and will get _all _the configured permissions."),(0,n.kt)("p",null,"TODO: do we need a drawing combining both examples showing the permission model? For spaces we walk \u2018up\u2019 the tree, then for users we walk \u2018down\u2019 the tree to look for specific users."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Space types")),(0,n.kt)("p",null,"The type of a space is used for two things: Control the usage and constraints of a group of spaces and provide default values for individual spaces, which can be overridden."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"User types")),(0,n.kt)("p",null,"Controls who and how the users are managed. E.g. end user accounts vs. automatically generated \u2018system\u2019 users, which are used as groups or roles."))}d.isMDXComponent=!0},701:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/momentum-domain-model-ef9e96ce18b20589f217aca006306040.svg"},6016:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/momentum-space-hierachy-example-81acd9a10e02773cc204a072f7081dac.svg"},1758:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/momentum-user-hierarchy-example-d511c04c86c675899475bdc9367b821d.svg"}}]);